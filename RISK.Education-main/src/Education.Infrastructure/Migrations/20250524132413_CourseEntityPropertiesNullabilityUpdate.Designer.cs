// <auto-generated />
using System;
using Education.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Education.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524132413_CourseEntityPropertiesNullabilityUpdate")]
    partial class CourseEntityPropertiesNullabilityUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Education.Persistence.AspNetUser.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.AspNetUser.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.AspNetUser.AspNetUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.AspNetUser.AspNetUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Contents.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_date");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_articles_category_id");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Contents.ArticleTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text")
                        .HasColumnName("meta_title");

                    b.Property<string>("ShortContent")
                        .HasColumnType("text")
                        .HasColumnName("short_content");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_article_translations");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_article_translations_article_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_article_translations_language_id");

                    b.ToTable("article_translations", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Contents.ContactUsRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_contact_us_requests");

                    b.ToTable("contact_us_requests", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Contents.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text")
                        .HasColumnName("meta_title");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<string>("ShortContent")
                        .HasColumnType("text")
                        .HasColumnName("short_content");

                    b.Property<bool>("ShowOnMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("show_on_main");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("slug")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_faqs");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_faqs_category_id");

                    b.ToTable("faqs", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Contents.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Contents.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OrderInCourse")
                        .HasColumnType("integer")
                        .HasColumnName("order_in_course");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_topics");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_topics_course_id");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Contents.TopicContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonQuizId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_quiz_id");

                    b.Property<int?>("LessonTheoryId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_theory_id");

                    b.Property<int?>("LessonVideoId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_video_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_topic_contents");

                    b.HasIndex("LessonQuizId")
                        .HasDatabaseName("ix_topic_contents_lesson_quiz_id");

                    b.HasIndex("LessonTheoryId")
                        .HasDatabaseName("ix_topic_contents_lesson_theory_id");

                    b.HasIndex("LessonVideoId")
                        .HasDatabaseName("ix_topic_contents_lesson_video_id");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_topic_contents_topic_id");

                    b.ToTable("topic_contents", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("QuestionAnswerCount")
                        .HasColumnType("integer")
                        .HasColumnName("question_answer_count");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_courses_category_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_courses_language_id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_courses_slug");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Courses.CourseProgressConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Component")
                        .HasColumnType("integer")
                        .HasColumnName("component");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LevelId")
                        .HasColumnType("integer")
                        .HasColumnName("level_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_course_progress_configuration");

                    b.HasIndex("LevelId")
                        .HasDatabaseName("ix_course_progress_configuration_level_id");

                    b.ToTable("course_progress_configuration", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Courses.CourseProgressLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_course_progress_level");

                    b.ToTable("course_progress_level", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Courses.CourseSummary", b =>
                {
                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text")
                        .HasColumnName("language_code");

                    b.Property<long?>("QuestionCount")
                        .HasColumnType("bigint")
                        .HasColumnName("question_count");

                    b.Property<long?>("TestExamCount")
                        .HasColumnType("bigint")
                        .HasColumnName("test_exam_count");

                    b.Property<long?>("TopicCount")
                        .HasColumnType("bigint")
                        .HasColumnName("topic_count");

                    b.ToTable((string)null);

                    b.ToView("course_summary", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Courses.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BasePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("base_price");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<double>("DiscountedPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("discounted_price");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int>("DurationType")
                        .HasColumnType("integer")
                        .HasColumnName("duration_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plans");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_subscription_plans_course_id");

                    b.ToTable("subscription_plans", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Courses.UserCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseAccessType")
                        .HasColumnType("integer")
                        .HasColumnName("course_access_type");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_courses");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_user_courses_course_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_courses_user_id");

                    b.ToTable("user_courses", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Languages.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OrderInTopic")
                        .HasColumnType("integer")
                        .HasColumnName("order_in_topic");

                    b.Property<int?>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_lessons");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_lessons_topic_id");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_free");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_lesson_quizes");

                    b.ToTable("lesson_quizes", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuizCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonQuizId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_quiz_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lesson_quiz_completions");

                    b.HasIndex("LessonQuizId")
                        .HasDatabaseName("ix_lesson_quiz_completions_lesson_quiz_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lesson_quiz_completions_user_id");

                    b.ToTable("lesson_quiz_completions", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuizLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int?>("LessonQuizId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_quiz_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_lesson_quiz_links");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_lesson_quiz_links_lesson_id");

                    b.HasIndex("LessonQuizId")
                        .HasDatabaseName("ix_lesson_quiz_links_lesson_quiz_id");

                    b.ToTable("lesson_quiz_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuizQuestionLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonQuizId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_quiz_id");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_lesson_quiz_question_links");

                    b.HasIndex("LessonQuizId")
                        .HasDatabaseName("ix_lesson_quiz_question_links_lesson_quiz_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_lesson_quiz_question_links_question_id");

                    b.ToTable("lesson_quiz_question_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuizUserQuestionAnswerLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int>("LessonQuizId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_quiz_id");

                    b.Property<Guid>("LessonQuizPassageToken")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_quiz_passage_token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserQuestionAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("user_question_answer_id");

                    b.HasKey("Id")
                        .HasName("pk_lesson_quiz_user_question_answer_links");

                    b.HasIndex("LessonQuizId")
                        .HasDatabaseName("ix_lesson_quiz_user_question_answer_links_lesson_quiz_id");

                    b.HasIndex("UserQuestionAnswerId")
                        .HasDatabaseName("ix_lesson_quiz_user_question_answer_links_user_question_answer");

                    b.ToTable("lesson_quiz_user_question_answer_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonTheory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_free");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_lesson_theories");

                    b.ToTable("lesson_theories", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonTheoryCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonTheoryId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_theory_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lesson_theory_completions");

                    b.HasIndex("LessonTheoryId")
                        .HasDatabaseName("ix_lesson_theory_completions_lesson_theory_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lesson_theory_completions_user_id");

                    b.ToTable("lesson_theory_completions", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonTheoryLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int?>("LessonTheoryId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_theory_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_lesson_theory_links");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_lesson_theory_links_lesson_id");

                    b.HasIndex("LessonTheoryId")
                        .HasDatabaseName("ix_lesson_theory_links_lesson_theory_id");

                    b.ToTable("lesson_theory_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_free");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_lesson_videos");

                    b.ToTable("lesson_videos", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonVideoCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonVideoId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_video_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lesson_video_completions");

                    b.HasIndex("LessonVideoId")
                        .HasDatabaseName("ix_lesson_video_completions_lesson_video_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lesson_video_completions_user_id");

                    b.ToTable("lesson_video_completions", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonVideoLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int?>("LessonVideoId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_video_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_lesson_video_links");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_lesson_video_links_lesson_id");

                    b.HasIndex("LessonVideoId")
                        .HasDatabaseName("ix_lesson_video_links_lesson_video_id");

                    b.ToTable("lesson_video_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("order_number")
                        .HasDefaultValueSql("''::text");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Orders.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseAccessType")
                        .HasColumnType("integer")
                        .HasColumnName("course_access_type");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int?>("SubscriptionPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_plan_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_order_details");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_order_details_course_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_details_order_id");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("ix_order_details_subscription_plan_id");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Orders.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("CallbackResponse")
                        .HasColumnType("text")
                        .HasColumnName("callback_response");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payments_order_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Orders.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("original_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_prices");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_prices_course_id");

                    b.ToTable("prices", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.PublicOpenQuestionSelectedAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("PublicQuestionAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("public_question_answer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_public_open_question_selected_answers");

                    b.HasIndex("PublicQuestionAnswerId")
                        .HasDatabaseName("ix_public_open_question_selected_answers_public_question_answe");

                    b.ToTable("public_open_question_selected_answers", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.PublicQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AnsweredCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("answered_correct");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("PublicId")
                        .HasColumnType("text")
                        .HasColumnName("public_id");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_public_question_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_public_question_answers_question_id");

                    b.ToTable("public_question_answers", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.PublicStandardQuestionSelectedAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("PublicQuestionAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("public_question_answer_id");

                    b.Property<int?>("QuestionAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("question_answer_id");

                    b.Property<int>("SelectedAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("selected_answer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_public_standard_question_selected_answers");

                    b.HasIndex("PublicQuestionAnswerId")
                        .HasDatabaseName("ix_public_standard_question_selected_answers_public_question_a");

                    b.HasIndex("QuestionAnswerId")
                        .HasDatabaseName("ix_public_standard_question_selected_answers_question_answer_id");

                    b.ToTable("public_standard_question_selected_answers", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerExplanation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer_explanation");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text")
                        .HasColumnName("audio_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_free");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("level");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question1");

                    b.Property<int>("QuestionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("question_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_question_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_answers_question_id");

                    b.ToTable("question_answers", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionAnswerImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("ImageAlt")
                        .HasColumnType("text")
                        .HasColumnName("image_alt");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("QuestionAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("question_answer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_question_answer_images");

                    b.HasIndex("QuestionAnswerId")
                        .HasDatabaseName("ix_question_answer_images_question_answer_id");

                    b.ToTable("question_answer_images", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("ImageAlt")
                        .HasColumnType("text")
                        .HasColumnName("image_alt");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_question_images");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_images_question_id");

                    b.ToTable("question_images", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionLessonLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_question_lesson_links");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("ix_question_lesson_links_lesson_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_lesson_links_question_id");

                    b.ToTable("question_lesson_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int>("QuestionBugStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("question_bug_status");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("QuestionReviewStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("question_review_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_question_reviews");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_reviews_question_id");

                    b.ToTable("question_reviews", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.RelatedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text")
                        .HasColumnName("audio_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer")
                        .HasColumnName("question_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_related_questions");

                    b.ToTable("related_questions", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.RelatedQuestionLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int?>("RelatedQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("related_question_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_related_question_links");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_related_question_links_question_id");

                    b.HasIndex("RelatedQuestionId")
                        .HasDatabaseName("ix_related_question_links_related_question_id");

                    b.ToTable("related_question_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.UserOpenQuestionSelectedAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserQuestionAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("user_question_answer_id");

                    b.HasKey("Id")
                        .HasName("pk_user_open_question_selected_answers");

                    b.HasIndex("UserQuestionAnswerId")
                        .HasDatabaseName("ix_user_open_question_selected_answers_user_question_answer_id");

                    b.ToTable("user_open_question_selected_answers", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.UserQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AnsweredCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("answered_correct");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("QuestionAnswerEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("question_answer_entity_id");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_question_answers");

                    b.HasIndex("QuestionAnswerEntityId")
                        .HasDatabaseName("ix_user_question_answers_question_answer_entity_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_user_question_answers_question_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_question_answers_user_id");

                    b.ToTable("user_question_answers", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Questions.UserStandardQuestionSelectedAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserQuestionAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("user_question_answer_id");

                    b.Property<int>("UserSelectedAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("user_selected_answer_id");

                    b.HasKey("Id")
                        .HasName("pk_user_standard_question_selected_answers");

                    b.HasIndex("UserQuestionAnswerId")
                        .HasDatabaseName("ix_user_standard_question_selected_answers_user_question_answe");

                    b.HasIndex("UserSelectedAnswerId")
                        .HasDatabaseName("ix_user_standard_question_selected_answers_user_selected_answe");

                    b.ToTable("user_standard_question_selected_answers", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("duration");

                    b.Property<string>("ExplanationUrl")
                        .HasColumnType("text")
                        .HasColumnName("explanation_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_free");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("level");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publish_date");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_test_exams");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_test_exams_course_id");

                    b.ToTable("test_exams", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("'-infinity'::timestamp with time zone");

                    b.Property<int?>("TestExamId")
                        .HasColumnType("integer")
                        .HasColumnName("test_exam_id");

                    b.Property<Guid>("TestExamPassageToken")
                        .HasColumnType("uuid")
                        .HasColumnName("test_exam_passage_token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_test_exam_history");

                    b.HasIndex("TestExamId")
                        .HasDatabaseName("ix_test_exam_history_test_exam_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_test_exam_history_user_id");

                    b.ToTable("test_exam_history", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamHistoryUserQuestionAnswerLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int>("TestExamHistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("test_exam_history_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserQuestionAnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("user_question_answer_id");

                    b.HasKey("Id")
                        .HasName("pk_test_exam_history_user_question_answer_links");

                    b.HasIndex("TestExamHistoryId")
                        .HasDatabaseName("ix_test_exam_history_user_question_answer_links_test_exam_hist");

                    b.HasIndex("UserQuestionAnswerId")
                        .HasDatabaseName("ix_test_exam_history_user_question_answer_links_user_question_");

                    b.ToTable("test_exam_history_user_question_answer_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamQuestionLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int?>("TestExamId")
                        .HasColumnType("integer")
                        .HasColumnName("test_exam_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_test_exam_question_links");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_test_exam_question_links_question_id");

                    b.HasIndex("TestExamId")
                        .HasDatabaseName("ix_test_exam_question_links_test_exam_id");

                    b.ToTable("test_exam_question_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<int>("TestExamId")
                        .HasColumnType("integer")
                        .HasColumnName("test_exam_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_test_exam_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_test_exam_tags_tag_id");

                    b.HasIndex("TestExamId")
                        .HasDatabaseName("ix_test_exam_tags_test_exam_id");

                    b.ToTable("test_exam_tags", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Users.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_admin_users");

                    b.ToTable("admin_users", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Users.AdminUserRoleLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminRole")
                        .HasColumnType("integer")
                        .HasColumnName("admin_role");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_user_id");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_admin_user_role_links");

                    b.HasIndex("AdminUserId")
                        .HasDatabaseName("ix_admin_user_role_links_admin_user_id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_admin_user_role_links_course_id");

                    b.ToTable("admin_user_role_links", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Users.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex(new[] { "NormalizedUserName" }, "uk_users_normalized_user_name")
                        .IsUnique()
                        .HasDatabaseName("ix_users_normalized_user_name");

                    b.HasIndex(new[] { "UserName" }, "uk_users_user_name")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_name");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Education.Persistence.Contents.Article", b =>
                {
                    b.HasOne("Education.Persistence.Categories.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_articles_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Education.Persistence.Contents.ArticleTranslation", b =>
                {
                    b.HasOne("Education.Persistence.Contents.Article", "Article")
                        .WithMany("ArticleTranslations")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_article_translations_articles_article_id");

                    b.HasOne("Education.Persistence.Languages.Language", "Language")
                        .WithMany("ArticleTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_article_translations_languages_language_id");

                    b.Navigation("Article");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Education.Persistence.Contents.Faq", b =>
                {
                    b.HasOne("Education.Persistence.Categories.Category", "Category")
                        .WithMany("Faqs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_faqs_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Education.Persistence.Contents.Topic", b =>
                {
                    b.HasOne("Education.Persistence.Courses.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_topics_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Education.Persistence.Contents.TopicContent", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.LessonQuiz", "LessonQuiz")
                        .WithMany("TopicContents")
                        .HasForeignKey("LessonQuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_topic_contents_lesson_quizzes_lesson_quiz_id");

                    b.HasOne("Education.Persistence.Lessons.LessonTheory", "LessonTheory")
                        .WithMany("TopicContents")
                        .HasForeignKey("LessonTheoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_topic_contents_lesson_theories_lesson_theory_id");

                    b.HasOne("Education.Persistence.Lessons.LessonVideo", "LessonVideo")
                        .WithMany("TopicContents")
                        .HasForeignKey("LessonVideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_topic_contents_lesson_videos_lesson_video_id");

                    b.HasOne("Education.Persistence.Contents.Topic", "Topic")
                        .WithMany("TopicContents")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_topic_contents_topics_topic_id");

                    b.Navigation("LessonQuiz");

                    b.Navigation("LessonTheory");

                    b.Navigation("LessonVideo");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Education.Persistence.Courses.Course", b =>
                {
                    b.HasOne("Education.Persistence.Categories.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_courses_categories_category_id");

                    b.HasOne("Education.Persistence.Languages.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_courses_languages_language_id");

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Education.Persistence.Courses.CourseProgressConfiguration", b =>
                {
                    b.HasOne("Education.Persistence.Courses.CourseProgressLevel", "Level")
                        .WithMany("CourseProgressConfigurations")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_course_progress_configuration_course_progress_levels_level_");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Education.Persistence.Courses.SubscriptionPlan", b =>
                {
                    b.HasOne("Education.Persistence.Courses.Course", "Course")
                        .WithMany("SubscriptionPlans")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_subscription_plans_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Education.Persistence.Courses.UserCourse", b =>
                {
                    b.HasOne("Education.Persistence.Courses.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_user_courses_courses_course_id");

                    b.HasOne("Education.Persistence.Users.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_user_courses_users_user_id");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.Lesson", b =>
                {
                    b.HasOne("Education.Persistence.Contents.Topic", "Topic")
                        .WithMany("Lessons")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lessons_topics_topic_id");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuizCompletion", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.LessonQuiz", "LessonQuiz")
                        .WithMany("LessonQuizCompletions")
                        .HasForeignKey("LessonQuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_quiz_completions_lesson_quizzes_lesson_quiz_id");

                    b.HasOne("Education.Persistence.Users.User", "User")
                        .WithMany("LessonQuizCompletions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_quiz_completions_users_user_id");

                    b.Navigation("LessonQuiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuizLink", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.Lesson", "Lesson")
                        .WithMany("LessonQuizLinks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_quiz_links_lessons_lesson_id");

                    b.HasOne("Education.Persistence.Lessons.LessonQuiz", "LessonQuiz")
                        .WithMany("LessonQuizLinks")
                        .HasForeignKey("LessonQuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_quiz_links_lesson_quizzes_lesson_quiz_id");

                    b.Navigation("Lesson");

                    b.Navigation("LessonQuiz");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuizQuestionLink", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.LessonQuiz", "LessonQuiz")
                        .WithMany("LessonQuizQuestionLinks")
                        .HasForeignKey("LessonQuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_quiz_question_links_lesson_quizzes_lesson_quiz_id");

                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("LessonQuizQuestionLinks")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_quiz_question_links_questions_question_id");

                    b.Navigation("LessonQuiz");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuizUserQuestionAnswerLink", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.LessonQuiz", "LessonQuiz")
                        .WithMany("LessonQuizUserQuestionAnswerLinks")
                        .HasForeignKey("LessonQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_quiz_user_question_answer_links_lesson_quizzes_lesso");

                    b.HasOne("Education.Persistence.Questions.UserQuestionAnswer", "UserQuestionAnswer")
                        .WithMany("LessonQuizUserQuestionAnswerLinks")
                        .HasForeignKey("UserQuestionAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_quiz_user_question_answer_links_user_question_answer");

                    b.Navigation("LessonQuiz");

                    b.Navigation("UserQuestionAnswer");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonTheoryCompletion", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.LessonTheory", "LessonTheory")
                        .WithMany("LessonTheoryCompletions")
                        .HasForeignKey("LessonTheoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_theory_completions_lesson_theories_lesson_theory_id");

                    b.HasOne("Education.Persistence.Users.User", "User")
                        .WithMany("LessonTheoryCompletions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_theory_completions_users_user_id");

                    b.Navigation("LessonTheory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonTheoryLink", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.Lesson", "Lesson")
                        .WithMany("LessonTheoryLinks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_theory_links_lessons_lesson_id");

                    b.HasOne("Education.Persistence.Lessons.LessonTheory", "LessonTheory")
                        .WithMany("LessonTheoryLinks")
                        .HasForeignKey("LessonTheoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_theory_links_lesson_theories_lesson_theory_id");

                    b.Navigation("Lesson");

                    b.Navigation("LessonTheory");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonVideoCompletion", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.LessonVideo", "LessonVideo")
                        .WithMany("LessonVideoCompletions")
                        .HasForeignKey("LessonVideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_video_completions_lesson_videos_lesson_video_id");

                    b.HasOne("Education.Persistence.Users.User", "User")
                        .WithMany("LessonVideoCompletions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_video_completions_users_user_id");

                    b.Navigation("LessonVideo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonVideoLink", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.Lesson", "Lesson")
                        .WithMany("LessonVideoLinks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_video_links_lessons_lesson_id");

                    b.HasOne("Education.Persistence.Lessons.LessonVideo", "LessonVideo")
                        .WithMany("LessonVideoLinks")
                        .HasForeignKey("LessonVideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_lesson_video_links_lesson_videos_lesson_video_id");

                    b.Navigation("Lesson");

                    b.Navigation("LessonVideo");
                });

            modelBuilder.Entity("Education.Persistence.Orders.Order", b =>
                {
                    b.HasOne("Education.Persistence.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.Persistence.Orders.OrderDetail", b =>
                {
                    b.HasOne("Education.Persistence.Courses.Course", "Course")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_order_details_courses_course_id");

                    b.HasOne("Education.Persistence.Orders.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_order_details_orders_order_id");

                    b.HasOne("Education.Persistence.Courses.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_order_details_subscription_plans_subscription_plan_id");

                    b.Navigation("Course");

                    b.Navigation("Order");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Education.Persistence.Orders.Payment", b =>
                {
                    b.HasOne("Education.Persistence.Orders.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_payments_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Education.Persistence.Orders.Price", b =>
                {
                    b.HasOne("Education.Persistence.Courses.Course", "Course")
                        .WithMany("Prices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_prices_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Education.Persistence.Questions.PublicOpenQuestionSelectedAnswer", b =>
                {
                    b.HasOne("Education.Persistence.Questions.PublicQuestionAnswer", "PublicQuestionAnswer")
                        .WithMany("PublicOpenQuestionSelectedAnswers")
                        .HasForeignKey("PublicQuestionAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_public_open_question_selected_answers_public_question_answe");

                    b.Navigation("PublicQuestionAnswer");
                });

            modelBuilder.Entity("Education.Persistence.Questions.PublicQuestionAnswer", b =>
                {
                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("PublicQuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_public_question_answers_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Education.Persistence.Questions.PublicStandardQuestionSelectedAnswer", b =>
                {
                    b.HasOne("Education.Persistence.Questions.PublicQuestionAnswer", "PublicQuestionAnswer")
                        .WithMany("PublicStandardQuestionSelectedAnswers")
                        .HasForeignKey("PublicQuestionAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_public_standard_question_selected_answers_public_question_a");

                    b.HasOne("Education.Persistence.Questions.QuestionAnswer", "QuestionAnswer")
                        .WithMany("PublicStandardQuestionSelectedAnswers")
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_public_standard_question_selected_answers_question_answers_");

                    b.Navigation("PublicQuestionAnswer");

                    b.Navigation("QuestionAnswer");
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionAnswer", b =>
                {
                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_question_answers_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionAnswerImage", b =>
                {
                    b.HasOne("Education.Persistence.Questions.QuestionAnswer", "QuestionAnswer")
                        .WithMany("QuestionAnswerImages")
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_answer_images_question_answers_question_answer_id");

                    b.Navigation("QuestionAnswer");
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionImage", b =>
                {
                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("QuestionImages")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_images_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionLessonLink", b =>
                {
                    b.HasOne("Education.Persistence.Lessons.Lesson", "Lesson")
                        .WithMany("QuestionLessonLinks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_question_lesson_links_lessons_lesson_id");

                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("QuestionLessonLinks")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_question_lesson_links_questions_question_id");

                    b.Navigation("Lesson");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionReview", b =>
                {
                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("QuestionReviews")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_question_reviews_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Education.Persistence.Questions.RelatedQuestionLink", b =>
                {
                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("RelatedQuestionLinks")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_related_question_links_questions_question_id");

                    b.HasOne("Education.Persistence.Questions.RelatedQuestion", "RelatedQuestion")
                        .WithMany("RelatedQuestionLinks")
                        .HasForeignKey("RelatedQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_related_question_links_related_questions_related_question_id");

                    b.Navigation("Question");

                    b.Navigation("RelatedQuestion");
                });

            modelBuilder.Entity("Education.Persistence.Questions.UserOpenQuestionSelectedAnswer", b =>
                {
                    b.HasOne("Education.Persistence.Questions.UserQuestionAnswer", "UserQuestionAnswer")
                        .WithMany("UserOpenQuestionSelectedAnswers")
                        .HasForeignKey("UserQuestionAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_user_open_question_selected_answers_user_question_answers_u");

                    b.Navigation("UserQuestionAnswer");
                });

            modelBuilder.Entity("Education.Persistence.Questions.UserQuestionAnswer", b =>
                {
                    b.HasOne("Education.Persistence.Questions.QuestionAnswer", "QuestionAnswerEntity")
                        .WithMany("UserQuestionAnswers")
                        .HasForeignKey("QuestionAnswerEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_user_question_answers_question_answers_question_answer_enti");

                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("UserQuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_user_question_answers_questions_question_id");

                    b.HasOne("Education.Persistence.Users.User", "User")
                        .WithMany("UserQuestionAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_user_question_answers_users_user_id");

                    b.Navigation("Question");

                    b.Navigation("QuestionAnswerEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.Persistence.Questions.UserStandardQuestionSelectedAnswer", b =>
                {
                    b.HasOne("Education.Persistence.Questions.UserQuestionAnswer", "UserQuestionAnswer")
                        .WithMany("UserStandardQuestionSelectedAnswers")
                        .HasForeignKey("UserQuestionAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_user_standard_question_selected_answers_user_question_answe");

                    b.HasOne("Education.Persistence.Questions.QuestionAnswer", "UserSelectedAnswer")
                        .WithMany("UserStandardQuestionSelectedAnswers")
                        .HasForeignKey("UserSelectedAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_standard_question_selected_answers_question_answers_us");

                    b.Navigation("UserQuestionAnswer");

                    b.Navigation("UserSelectedAnswer");
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExam", b =>
                {
                    b.HasOne("Education.Persistence.Courses.Course", "Course")
                        .WithMany("TestExams")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_test_exams_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamHistory", b =>
                {
                    b.HasOne("Education.Persistence.TestExams.TestExam", "TestExam")
                        .WithMany("TestExamHistories")
                        .HasForeignKey("TestExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_test_exam_history_test_exams_test_exam_id");

                    b.HasOne("Education.Persistence.Users.User", "User")
                        .WithMany("TestExamHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_test_exam_history_users_user_id");

                    b.Navigation("TestExam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamHistoryUserQuestionAnswerLink", b =>
                {
                    b.HasOne("Education.Persistence.TestExams.TestExamHistory", "TestExamHistory")
                        .WithMany("TestExamHistoryUserQuestionAnswerLinks")
                        .HasForeignKey("TestExamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_test_exam_history_user_question_answer_links_test_exam_hist");

                    b.HasOne("Education.Persistence.Questions.UserQuestionAnswer", "UserQuestionAnswer")
                        .WithMany("TestExamHistoryUserQuestionAnswerLinks")
                        .HasForeignKey("UserQuestionAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_test_exam_history_user_question_answer_links_user_question_");

                    b.Navigation("TestExamHistory");

                    b.Navigation("UserQuestionAnswer");
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamQuestionLink", b =>
                {
                    b.HasOne("Education.Persistence.Questions.Question", "Question")
                        .WithMany("TestExamQuestionLinks")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_test_exam_question_links_questions_question_id");

                    b.HasOne("Education.Persistence.TestExams.TestExam", "TestExam")
                        .WithMany("TestExamQuestionLinks")
                        .HasForeignKey("TestExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_test_exam_question_links_test_exams_test_exam_id");

                    b.Navigation("Question");

                    b.Navigation("TestExam");
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamTag", b =>
                {
                    b.HasOne("Education.Persistence.Contents.Tag", "Tag")
                        .WithMany("TestExamTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_test_exam_tags_tags_tag_id");

                    b.HasOne("Education.Persistence.TestExams.TestExam", "TestExam")
                        .WithMany("TestExamTags")
                        .HasForeignKey("TestExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_test_exam_tags_test_exams_test_exam_id");

                    b.Navigation("Tag");

                    b.Navigation("TestExam");
                });

            modelBuilder.Entity("Education.Persistence.Users.AdminUserRoleLink", b =>
                {
                    b.HasOne("Education.Persistence.Users.AdminUser", "AdminUser")
                        .WithMany("AdminUserRoleLinks")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_admin_user_role_links_admin_users_admin_user_id");

                    b.HasOne("Education.Persistence.Courses.Course", "Course")
                        .WithMany("AdminUserRoleLinks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_admin_user_role_links_courses_course_id");

                    b.Navigation("AdminUser");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Education.Persistence.Categories.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Courses");

                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("Education.Persistence.Contents.Article", b =>
                {
                    b.Navigation("ArticleTranslations");
                });

            modelBuilder.Entity("Education.Persistence.Contents.Tag", b =>
                {
                    b.Navigation("TestExamTags");
                });

            modelBuilder.Entity("Education.Persistence.Contents.Topic", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TopicContents");
                });

            modelBuilder.Entity("Education.Persistence.Courses.Course", b =>
                {
                    b.Navigation("AdminUserRoleLinks");

                    b.Navigation("OrderDetails");

                    b.Navigation("Prices");

                    b.Navigation("SubscriptionPlans");

                    b.Navigation("TestExams");

                    b.Navigation("Topics");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("Education.Persistence.Courses.CourseProgressLevel", b =>
                {
                    b.Navigation("CourseProgressConfigurations");
                });

            modelBuilder.Entity("Education.Persistence.Courses.SubscriptionPlan", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Education.Persistence.Languages.Language", b =>
                {
                    b.Navigation("ArticleTranslations");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.Lesson", b =>
                {
                    b.Navigation("LessonQuizLinks");

                    b.Navigation("LessonTheoryLinks");

                    b.Navigation("LessonVideoLinks");

                    b.Navigation("QuestionLessonLinks");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonQuiz", b =>
                {
                    b.Navigation("LessonQuizCompletions");

                    b.Navigation("LessonQuizLinks");

                    b.Navigation("LessonQuizQuestionLinks");

                    b.Navigation("LessonQuizUserQuestionAnswerLinks");

                    b.Navigation("TopicContents");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonTheory", b =>
                {
                    b.Navigation("LessonTheoryCompletions");

                    b.Navigation("LessonTheoryLinks");

                    b.Navigation("TopicContents");
                });

            modelBuilder.Entity("Education.Persistence.Lessons.LessonVideo", b =>
                {
                    b.Navigation("LessonVideoCompletions");

                    b.Navigation("LessonVideoLinks");

                    b.Navigation("TopicContents");
                });

            modelBuilder.Entity("Education.Persistence.Orders.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Education.Persistence.Questions.PublicQuestionAnswer", b =>
                {
                    b.Navigation("PublicOpenQuestionSelectedAnswers");

                    b.Navigation("PublicStandardQuestionSelectedAnswers");
                });

            modelBuilder.Entity("Education.Persistence.Questions.Question", b =>
                {
                    b.Navigation("LessonQuizQuestionLinks");

                    b.Navigation("PublicQuestionAnswers");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("QuestionImages");

                    b.Navigation("QuestionLessonLinks");

                    b.Navigation("QuestionReviews");

                    b.Navigation("RelatedQuestionLinks");

                    b.Navigation("TestExamQuestionLinks");

                    b.Navigation("UserQuestionAnswers");
                });

            modelBuilder.Entity("Education.Persistence.Questions.QuestionAnswer", b =>
                {
                    b.Navigation("PublicStandardQuestionSelectedAnswers");

                    b.Navigation("QuestionAnswerImages");

                    b.Navigation("UserQuestionAnswers");

                    b.Navigation("UserStandardQuestionSelectedAnswers");
                });

            modelBuilder.Entity("Education.Persistence.Questions.RelatedQuestion", b =>
                {
                    b.Navigation("RelatedQuestionLinks");
                });

            modelBuilder.Entity("Education.Persistence.Questions.UserQuestionAnswer", b =>
                {
                    b.Navigation("LessonQuizUserQuestionAnswerLinks");

                    b.Navigation("TestExamHistoryUserQuestionAnswerLinks");

                    b.Navigation("UserOpenQuestionSelectedAnswers");

                    b.Navigation("UserStandardQuestionSelectedAnswers");
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExam", b =>
                {
                    b.Navigation("TestExamHistories");

                    b.Navigation("TestExamQuestionLinks");

                    b.Navigation("TestExamTags");
                });

            modelBuilder.Entity("Education.Persistence.TestExams.TestExamHistory", b =>
                {
                    b.Navigation("TestExamHistoryUserQuestionAnswerLinks");
                });

            modelBuilder.Entity("Education.Persistence.Users.AdminUser", b =>
                {
                    b.Navigation("AdminUserRoleLinks");
                });

            modelBuilder.Entity("Education.Persistence.Users.User", b =>
                {
                    b.Navigation("LessonQuizCompletions");

                    b.Navigation("LessonTheoryCompletions");

                    b.Navigation("LessonVideoCompletions");

                    b.Navigation("Orders");

                    b.Navigation("TestExamHistories");

                    b.Navigation("UserCourses");

                    b.Navigation("UserQuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
